// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xad, 0x48, 0xcc, 0x2d,
	0xc8, 0x49, 0x95, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f,
	0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0x28, 0x93, 0xe2, 0xcb, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x85, 0xf2, 0x8d, 0x36, 0x33, 0x73, 0x71, 0x47, 0xe6, 0x97, 0x16,
	0x05, 0x43, 0x0c, 0x13, 0x0a, 0xe6, 0x62, 0x71, 0x4d, 0xce, 0xc8, 0x17, 0x12, 0xd3, 0x83, 0x9a,
	0xa7, 0x17, 0x5c, 0x52, 0x94, 0x99, 0x97, 0xee, 0x0b, 0xd1, 0x26, 0x85, 0x43, 0x5c, 0x49, 0xba,
	0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0xa2, 0x4a, 0x02, 0xfa, 0x65, 0x86, 0xfa, 0x50, 0x25, 0xfa, 0xa9,
	0xc9, 0x19, 0xf9, 0x56, 0x8c, 0x5a, 0x42, 0xf9, 0x5c, 0x02, 0x20, 0x43, 0x41, 0x76, 0xa4, 0x16,
	0x05, 0x97, 0x14, 0xa5, 0x26, 0xe6, 0x92, 0x6c, 0x81, 0x26, 0xd8, 0x02, 0x65, 0x25, 0x39, 0x90,
	0x05, 0xc5, 0x60, 0x93, 0xf4, 0x8b, 0xc1, 0x46, 0xa1, 0x5b, 0x67, 0xc0, 0x08, 0xb3, 0xd0, 0x39,
	0x27, 0x33, 0x35, 0xaf, 0x84, 0x1a, 0x16, 0x26, 0x83, 0x4d, 0xc2, 0x61, 0xa1, 0x06, 0xa3, 0x50,
	0x2e, 0x17, 0x1f, 0xc8, 0x42, 0xa7, 0x4c, 0x97, 0x4c, 0x32, 0xad, 0x53, 0x07, 0x5b, 0xa7, 0xa8,
	0x24, 0x03, 0xb2, 0x2e, 0x29, 0x33, 0x25, 0x13, 0xa7, 0x65, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0xc8,
	0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x18, 0x1d, 0x98, 0xf1, 0x04, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YourServiceClient is the client API for YourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YourServiceClient interface {
	Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	EchoServerStream(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (YourService_EchoServerStreamClient, error)
	EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (YourService_EchoClientStreamClient, error)
	EchoBiDiStream(ctx context.Context, opts ...grpc.CallOption) (YourService_EchoBiDiStreamClient, error)
}

type yourServiceClient struct {
	cc *grpc.ClientConn
}

func NewYourServiceClient(cc *grpc.ClientConn) YourServiceClient {
	return &yourServiceClient{cc}
}

func (c *yourServiceClient) Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/example.YourService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourServiceClient) EchoServerStream(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (YourService_EchoServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YourService_serviceDesc.Streams[0], "/example.YourService/EchoServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &yourServiceEchoServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YourService_EchoServerStreamClient interface {
	Recv() (*StringMessage, error)
	grpc.ClientStream
}

type yourServiceEchoServerStreamClient struct {
	grpc.ClientStream
}

func (x *yourServiceEchoServerStreamClient) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yourServiceClient) EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (YourService_EchoClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YourService_serviceDesc.Streams[1], "/example.YourService/EchoClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &yourServiceEchoClientStreamClient{stream}
	return x, nil
}

type YourService_EchoClientStreamClient interface {
	Send(*StringMessage) error
	CloseAndRecv() (*StringMessage, error)
	grpc.ClientStream
}

type yourServiceEchoClientStreamClient struct {
	grpc.ClientStream
}

func (x *yourServiceEchoClientStreamClient) Send(m *StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yourServiceEchoClientStreamClient) CloseAndRecv() (*StringMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yourServiceClient) EchoBiDiStream(ctx context.Context, opts ...grpc.CallOption) (YourService_EchoBiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YourService_serviceDesc.Streams[2], "/example.YourService/EchoBiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &yourServiceEchoBiDiStreamClient{stream}
	return x, nil
}

type YourService_EchoBiDiStreamClient interface {
	Send(*StringMessage) error
	Recv() (*StringMessage, error)
	grpc.ClientStream
}

type yourServiceEchoBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *yourServiceEchoBiDiStreamClient) Send(m *StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yourServiceEchoBiDiStreamClient) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YourServiceServer is the server API for YourService service.
type YourServiceServer interface {
	Echo(context.Context, *StringMessage) (*StringMessage, error)
	EchoServerStream(*StringMessage, YourService_EchoServerStreamServer) error
	EchoClientStream(YourService_EchoClientStreamServer) error
	EchoBiDiStream(YourService_EchoBiDiStreamServer) error
}

func RegisterYourServiceServer(s *grpc.Server, srv YourServiceServer) {
	s.RegisterService(&_YourService_serviceDesc, srv)
}

func _YourService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.YourService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Echo(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourService_EchoServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YourServiceServer).EchoServerStream(m, &yourServiceEchoServerStreamServer{stream})
}

type YourService_EchoServerStreamServer interface {
	Send(*StringMessage) error
	grpc.ServerStream
}

type yourServiceEchoServerStreamServer struct {
	grpc.ServerStream
}

func (x *yourServiceEchoServerStreamServer) Send(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _YourService_EchoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YourServiceServer).EchoClientStream(&yourServiceEchoClientStreamServer{stream})
}

type YourService_EchoClientStreamServer interface {
	SendAndClose(*StringMessage) error
	Recv() (*StringMessage, error)
	grpc.ServerStream
}

type yourServiceEchoClientStreamServer struct {
	grpc.ServerStream
}

func (x *yourServiceEchoClientStreamServer) SendAndClose(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yourServiceEchoClientStreamServer) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _YourService_EchoBiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YourServiceServer).EchoBiDiStream(&yourServiceEchoBiDiStreamServer{stream})
}

type YourService_EchoBiDiStreamServer interface {
	Send(*StringMessage) error
	Recv() (*StringMessage, error)
	grpc.ServerStream
}

type yourServiceEchoBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *yourServiceEchoBiDiStreamServer) Send(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yourServiceEchoBiDiStreamServer) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _YourService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.YourService",
	HandlerType: (*YourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _YourService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoServerStream",
			Handler:       _YourService_EchoServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoClientStream",
			Handler:       _YourService_EchoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoBiDiStream",
			Handler:       _YourService_EchoBiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
